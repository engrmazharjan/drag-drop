{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://drag-drop/./src/decorators/autobind.ts","webpack://drag-drop/./src/models/project.ts","webpack://drag-drop/./src/state/project-state.ts","webpack://drag-drop/./src/utils/validation.ts","webpack://drag-drop/./src/components/base-components.ts","webpack://drag-drop/./src/components/project-input.ts","webpack://drag-drop/./src/components/project-item.ts","webpack://drag-drop/./src/components/project-list.ts","webpack://drag-drop/./src/app.ts"],"sourcesContent":["// * AutoBind Decorator\r\nexport const AutoBind = (\r\n  _: any,\r\n  _2: string,\r\n  descriptor: PropertyDescriptor\r\n) => {\r\n  const originalMethod = descriptor.value;\r\n  const adjustedDescriptor: PropertyDescriptor = {\r\n    configurable: true,\r\n    get() {\r\n      const boundFn = originalMethod.bind(this);\r\n      return boundFn;\r\n    },\r\n  };\r\n  return adjustedDescriptor;\r\n};\r\n","// * Project Type\r\nexport enum ProjectStatus {\r\n  Active,\r\n  Finished,\r\n}\r\n\r\nexport class Project {\r\n  constructor(\r\n    public id: string,\r\n    public title: string,\r\n    public description: string,\r\n    public people: number,\r\n    public status: ProjectStatus\r\n  ) {}\r\n}\r\n","import { Project, ProjectStatus } from \"../models/project\";\r\n\r\n// * Project State Management\r\ntype Listener<T> = (items: T[]) => void;\r\n\r\nclass State<T> {\r\n  protected listeners: Listener<T>[] = [];\r\n\r\n  addListener(listenerFn: Listener<T>) {\r\n    this.listeners.push(listenerFn);\r\n  }\r\n}\r\n\r\nexport class ProjectState extends State<Project> {\r\n  private projects: Project[] = [];\r\n  private static instance: ProjectState;\r\n\r\n  private constructor() {\r\n    super();\r\n  }\r\n\r\n  static getInstance() {\r\n    if (this.instance) {\r\n      return this.instance;\r\n    }\r\n    this.instance = new ProjectState();\r\n    return this.instance;\r\n  }\r\n\r\n  addProject(title: string, description: string, numOfPeople: number) {\r\n    const newProject = new Project(\r\n      Math.random().toString(),\r\n      title,\r\n      description,\r\n      numOfPeople,\r\n      ProjectStatus.Active\r\n    );\r\n    this.projects.push(newProject);\r\n    this.updateListeners();\r\n  }\r\n\r\n  moveProject(projectId: string, newStatus: ProjectStatus) {\r\n    const project = this.projects.find((prj) => prj.id === projectId);\r\n    if (project && project.status !== newStatus) {\r\n      project.status = newStatus;\r\n      this.updateListeners();\r\n    }\r\n  }\r\n\r\n  private updateListeners() {\r\n    for (const listenerFn of this.listeners) {\r\n      listenerFn(this.projects.slice());\r\n    }\r\n  }\r\n}\r\nexport const projectState = ProjectState.getInstance();\r\n","// * Validation\r\nexport interface Validatable {\r\n  value: string | number;\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport function validate(validatableInput: Validatable) {\r\n  let isValid = true;\r\n  if (validatableInput.required) {\r\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\r\n  }\r\n\r\n  if (\r\n    validatableInput.minLength != null &&\r\n    typeof validatableInput.value === \"string\"\r\n  ) {\r\n    isValid =\r\n      isValid && validatableInput.value.length >= validatableInput.minLength;\r\n  }\r\n\r\n  if (\r\n    validatableInput.maxLength != null &&\r\n    typeof validatableInput.value === \"string\"\r\n  ) {\r\n    isValid =\r\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\r\n  }\r\n\r\n  if (\r\n    validatableInput.min != null &&\r\n    typeof validatableInput.value === \"number\"\r\n  ) {\r\n    isValid = isValid && validatableInput.value >= validatableInput.min;\r\n  }\r\n\r\n  if (\r\n    validatableInput.max != null &&\r\n    typeof validatableInput.value === \"number\"\r\n  ) {\r\n    isValid = isValid && validatableInput.value <= validatableInput.max;\r\n  }\r\n\r\n  return isValid;\r\n}\r\n","// * Component Base Class\r\nexport default abstract class Component<\r\n  T extends HTMLElement,\r\n  U extends HTMLElement\r\n> {\r\n  templateElement: HTMLTemplateElement;\r\n  hostElement: T;\r\n  element: U;\r\n\r\n  constructor(\r\n    templateId: string,\r\n    hostElementId: string,\r\n    insertAtStart: boolean,\r\n    newElementId?: string\r\n  ) {\r\n    this.templateElement = document.getElementById(\r\n      templateId\r\n    )! as HTMLTemplateElement;\r\n    this.hostElement = document.getElementById(hostElementId)! as T;\r\n\r\n    const importedNode = document.importNode(\r\n      this.templateElement.content,\r\n      true\r\n    );\r\n    this.element = importedNode.firstElementChild as U;\r\n    if (newElementId) {\r\n      this.element.id = newElementId;\r\n    }\r\n\r\n    this.attach(insertAtStart);\r\n  }\r\n\r\n  private attach(insertAtBeginning: boolean) {\r\n    this.hostElement.insertAdjacentElement(\r\n      insertAtBeginning ? \"afterbegin\" : \"beforeend\",\r\n      this.element\r\n    );\r\n  }\r\n\r\n  abstract configure(): void;\r\n  abstract renderContent(): void;\r\n}\r\n","import { AutoBind } from \"../decorators/autobind\";\r\nimport { projectState } from \"../state/project-state\";\r\nimport * as Validation from \"../utils/validation\";\r\nimport Component from \"./base-components\";\r\n\r\n// * ProjectInput Class\r\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\r\n  titleInputElement: HTMLInputElement;\r\n  descriptionInputElement: HTMLInputElement;\r\n  peopleInputElement: HTMLInputElement;\r\n\r\n  constructor() {\r\n    super(\"project-input\", \"app\", true, \"user-input\");\r\n\r\n    this.titleInputElement = this.element.querySelector(\r\n      \"#title\"\r\n    ) as HTMLInputElement;\r\n\r\n    this.descriptionInputElement = this.element.querySelector(\r\n      \"#description\"\r\n    ) as HTMLInputElement;\r\n\r\n    this.peopleInputElement = this.element.querySelector(\r\n      \"#people\"\r\n    ) as HTMLInputElement;\r\n\r\n    this.configure();\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"submit\", this.submitHandler);\r\n  }\r\n  renderContent() {}\r\n\r\n  private gatherUserInput(): [string, string, number] | void {\r\n    const enteredTitle = this.titleInputElement.value;\r\n    const enteredDescription = this.descriptionInputElement.value;\r\n    const enteredPeople = this.peopleInputElement.value;\r\n\r\n    const titleValidatable: Validation.Validatable = {\r\n      value: enteredTitle,\r\n      required: true,\r\n    };\r\n\r\n    const descriptionValidatable: Validation.Validatable = {\r\n      value: enteredDescription,\r\n      required: true,\r\n      minLength: 5,\r\n    };\r\n\r\n    const peopleValidatable: Validation.Validatable = {\r\n      value: +enteredPeople,\r\n      required: true,\r\n      min: 1,\r\n      max: 5,\r\n    };\r\n\r\n    if (\r\n      !Validation.validate(titleValidatable) ||\r\n      !Validation.validate(descriptionValidatable) ||\r\n      !Validation.validate(peopleValidatable)\r\n    ) {\r\n      alert(\"Invalid input, please try again!\");\r\n      return;\r\n    } else {\r\n      return [enteredTitle, enteredDescription, +enteredPeople];\r\n    }\r\n  }\r\n\r\n  // * Clear Input Fields\r\n  private clearInputs() {\r\n    this.titleInputElement.value = \"\";\r\n    this.descriptionInputElement.value = \"\";\r\n    this.peopleInputElement.value = \"\";\r\n  }\r\n\r\n  @AutoBind\r\n  private submitHandler(event: Event) {\r\n    event.preventDefault();\r\n    const userInput = this.gatherUserInput();\r\n    if (Array.isArray(userInput)) {\r\n      const [title, desc, people] = userInput;\r\n      projectState.addProject(title, desc, people);\r\n      this.clearInputs();\r\n    }\r\n  }\r\n}\r\n","import { AutoBind } from \"../decorators/autobind\";\r\nimport { Draggable } from \"../models/drag-drop\";\r\nimport { Project } from \"../models/project\";\r\nimport Component from \"./base-components\";\r\n\r\n// * ProjectItem Class\r\nexport class ProjectItem\r\n  extends Component<HTMLUListElement, HTMLLIElement>\r\n  implements Draggable\r\n{\r\n  private project: Project;\r\n\r\n  get persons() {\r\n    if (this.project.people === 1) {\r\n      return \"1 person\";\r\n    } else {\r\n      return `${this.project.people} persons`;\r\n    }\r\n  }\r\n\r\n  constructor(hostId: string, project: Project) {\r\n    super(\"single-project\", hostId, false, project.id);\r\n    this.project = project;\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n\r\n  @AutoBind\r\n  dragStartHandler(event: DragEvent) {\r\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\r\n    event.dataTransfer!.effectAllowed = \"move\";\r\n  }\r\n\r\n  dragEndHandler(_: DragEvent) {\r\n    console.log(\"DragEnd\");\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\r\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\r\n  }\r\n\r\n  renderContent() {\r\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\r\n    this.element.querySelector(\"h3\")!.textContent = this.persons + \" assigned\";\r\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\r\n  }\r\n}\r\n","import { AutoBind } from \"../decorators/autobind\";\r\nimport { DragTarget } from \"../models/drag-drop\";\r\nimport { Project, ProjectStatus } from \"../models/project\";\r\nimport { projectState } from \"../state/project-state\";\r\nimport Component from \"./base-components\";\r\nimport { ProjectItem } from \"./project-item\";\r\n\r\n// * ProjectList Class\r\nexport class ProjectList\r\n  extends Component<HTMLDivElement, HTMLElement>\r\n  implements DragTarget\r\n{\r\n  assignedProjects: Project[];\r\n\r\n  constructor(private type: \"active\" | \"finished\") {\r\n    super(\"project-list\", \"app\", false, `${type}-projects`);\r\n    this.assignedProjects = [];\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n\r\n  @AutoBind\r\n  dragOverHandler(event: DragEvent) {\r\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\r\n      event.preventDefault();\r\n      const listEl = this.element.querySelector(\"ul\")!;\r\n      listEl.classList.add(\"droppable\");\r\n    }\r\n  }\r\n\r\n  @AutoBind\r\n  dropHandler(event: DragEvent) {\r\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\r\n    projectState.moveProject(\r\n      prjId,\r\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\r\n    );\r\n  }\r\n\r\n  @AutoBind\r\n  dragLeaveHandler(_: DragEvent) {\r\n    const listEl = this.element.querySelector(\"ul\")!;\r\n    listEl.classList.remove(\"droppable\");\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\r\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\r\n    this.element.addEventListener(\"drop\", this.dropHandler);\r\n\r\n    projectState.addListener((projects: Project[]) => {\r\n      const relevantProjects = projects.filter((prj) => {\r\n        if (this.type === \"active\") {\r\n          return prj.status === ProjectStatus.Active;\r\n        }\r\n        return prj.status === ProjectStatus.Finished;\r\n      });\r\n      this.assignedProjects = relevantProjects;\r\n      this.renderProjects();\r\n    });\r\n  }\r\n\r\n  renderContent() {\r\n    const listId = `${this.type}-projects-list`;\r\n    this.element.querySelector(\"ul\")!.id = listId;\r\n    this.element.querySelector(\"h2\")!.textContent =\r\n      this.type.toUpperCase() + \" PROJECTS\";\r\n  }\r\n\r\n  private renderProjects() {\r\n    const listEl = document.getElementById(\r\n      `${this.type}-projects-list`\r\n    )! as HTMLUListElement;\r\n\r\n    listEl.innerHTML = \"\";\r\n\r\n    for (const projectItem of this.assignedProjects) {\r\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, projectItem);\r\n    }\r\n  }\r\n}\r\n","import { ProjectInput } from \"./components/project-input\";\r\nimport { ProjectList } from \"./components/project-list\";\r\n\r\nnew ProjectInput();\r\nnew ProjectList(\"active\");\r\nnew ProjectList(\"finished\");\r\n"],"names":["AutoBind","_","_2","descriptor","originalMethod","value","configurable","get","bind","this","ProjectStatus","Project","constructor","id","title","description","people","status","State","listeners","addListener","listenerFn","push","ProjectState","super","projects","static","instance","addProject","numOfPeople","newProject","Math","random","toString","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","getInstance","validate","validatableInput","isValid","required","trim","length","minLength","maxLength","min","max","Component","templateId","hostElementId","insertAtStart","newElementId","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","attach","insertAtBeginning","insertAdjacentElement","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDescription","enteredPeople","descriptionValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","persons","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","prjId","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","projectItem"],"sourceRoot":""}